/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface KortxyzAggrid {
        /**
          * Fetch data from a url
         */
        "data": string;
        /**
          * Fetch data from a store
         */
        "store": string;
    }
    interface KortxyzDatastore {
        /**
          * URL to the data to be fetch into the Store AA
         */
        "data"?: string;
        /**
          * Name of the store
         */
        "store"?: string;
    }
    interface KortxyzMaplibre {
        "basemapstyle": maplibregl.StyleSpecification | string;
        "bbox": string;
        "center": string;
        "cooperativeGestures": boolean;
        "hoverpopup": boolean;
        "map": maplibregl.Map;
        "mapboxkey": string;
        "mapstyle": maplibregl.StyleSpecification | string;
        "showTileBoundaries": boolean;
        "zoom": number;
    }
    interface KortxyzMaplibreLayer {
        /**
          * (optional) When clicking a feature a new webpage is opened with the link prop. {} can be used to replace with a attribute. https://mypage.org/{ATTRIBUTENAME}
         */
        "clicklink": any;
        /**
          * Expression to fitler the layer
         */
        "filter": any;
        /**
          * Layout properties for the layer.
         */
        "layout": any;
        /**
          * Paint properties for the layer.
         */
        "paint": any;
        /**
          * (optional) When clicking a feature a Popup shows. Accept HTML and replacement of {} with a attribute. \<div>{placename}\</div>
         */
        "popup": string | boolean;
        /**
          * Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources.
         */
        "sourceLayer"?: string;
        /**
          * Type of layer
         */
        "type": 'circle' | 'line' | 'fill';
    }
    interface KortxyzMaplibreSearchbox {
        /**
          * How to format results. Replacement of {} with a attribute. {ATTRIBUTENAME}
         */
        "result": string;
        /**
          * Should a result pick be a marker on the map or a click on the map
         */
        "resulttype": "marker" | "click";
        /**
          * How far should the map zoom in on result. Empty prop if no zooming is needed
         */
        "resultzoom": number;
        /**
          * Url to make input calls that return a geojson with points. Input are available as {input}
         */
        "url": string;
    }
    interface KortxyzMaplibreSource {
        /**
          * add a layer without specifing it ONLY GEOJSON
         */
        "autolayers": boolean;
        /**
          * URL to the geojson source.
         */
        "data": string;
        /**
          * fit mapbounds to geojsonbounds
         */
        "fit": boolean;
        /**
          * Max zoom-level to fetch tiles. z-parameter
         */
        "maxzoom": number;
        /**
          * Datastore reference.
         */
        "store": string;
        /**
          * Url to the tilesource. e.g. https://demotiles.maplibre.org/tiles/{z}/{x}/{y}.pbf
         */
        "tiles": string;
        /**
          * Size of the tiles in px.
         */
        "tilesize": number;
        /**
          * Type of source.
         */
        "type": 'vector' | 'geojson' | 'raster';
    }
}
export interface KortxyzAggridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKortxyzAggridElement;
}
export interface KortxyzMaplibreLayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKortxyzMaplibreLayerElement;
}
declare global {
    interface HTMLKortxyzAggridElementEventMap {
        "rowClicked": any;
    }
    interface HTMLKortxyzAggridElement extends Components.KortxyzAggrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKortxyzAggridElementEventMap>(type: K, listener: (this: HTMLKortxyzAggridElement, ev: KortxyzAggridCustomEvent<HTMLKortxyzAggridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKortxyzAggridElementEventMap>(type: K, listener: (this: HTMLKortxyzAggridElement, ev: KortxyzAggridCustomEvent<HTMLKortxyzAggridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKortxyzAggridElement: {
        prototype: HTMLKortxyzAggridElement;
        new (): HTMLKortxyzAggridElement;
    };
    interface HTMLKortxyzDatastoreElement extends Components.KortxyzDatastore, HTMLStencilElement {
    }
    var HTMLKortxyzDatastoreElement: {
        prototype: HTMLKortxyzDatastoreElement;
        new (): HTMLKortxyzDatastoreElement;
    };
    interface HTMLKortxyzMaplibreElement extends Components.KortxyzMaplibre, HTMLStencilElement {
    }
    var HTMLKortxyzMaplibreElement: {
        prototype: HTMLKortxyzMaplibreElement;
        new (): HTMLKortxyzMaplibreElement;
    };
    interface HTMLKortxyzMaplibreLayerElementEventMap {
        "featureClicked": any;
    }
    interface HTMLKortxyzMaplibreLayerElement extends Components.KortxyzMaplibreLayer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKortxyzMaplibreLayerElementEventMap>(type: K, listener: (this: HTMLKortxyzMaplibreLayerElement, ev: KortxyzMaplibreLayerCustomEvent<HTMLKortxyzMaplibreLayerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKortxyzMaplibreLayerElementEventMap>(type: K, listener: (this: HTMLKortxyzMaplibreLayerElement, ev: KortxyzMaplibreLayerCustomEvent<HTMLKortxyzMaplibreLayerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKortxyzMaplibreLayerElement: {
        prototype: HTMLKortxyzMaplibreLayerElement;
        new (): HTMLKortxyzMaplibreLayerElement;
    };
    interface HTMLKortxyzMaplibreSearchboxElement extends Components.KortxyzMaplibreSearchbox, HTMLStencilElement {
    }
    var HTMLKortxyzMaplibreSearchboxElement: {
        prototype: HTMLKortxyzMaplibreSearchboxElement;
        new (): HTMLKortxyzMaplibreSearchboxElement;
    };
    interface HTMLKortxyzMaplibreSourceElement extends Components.KortxyzMaplibreSource, HTMLStencilElement {
    }
    var HTMLKortxyzMaplibreSourceElement: {
        prototype: HTMLKortxyzMaplibreSourceElement;
        new (): HTMLKortxyzMaplibreSourceElement;
    };
    interface HTMLElementTagNameMap {
        "kortxyz-aggrid": HTMLKortxyzAggridElement;
        "kortxyz-datastore": HTMLKortxyzDatastoreElement;
        "kortxyz-maplibre": HTMLKortxyzMaplibreElement;
        "kortxyz-maplibre-layer": HTMLKortxyzMaplibreLayerElement;
        "kortxyz-maplibre-searchbox": HTMLKortxyzMaplibreSearchboxElement;
        "kortxyz-maplibre-source": HTMLKortxyzMaplibreSourceElement;
    }
}
declare namespace LocalJSX {
    interface KortxyzAggrid {
        /**
          * Fetch data from a url
         */
        "data"?: string;
        /**
          * Event when row is clicked
         */
        "onRowClicked"?: (event: KortxyzAggridCustomEvent<any>) => void;
        /**
          * Fetch data from a store
         */
        "store"?: string;
    }
    interface KortxyzDatastore {
        /**
          * URL to the data to be fetch into the Store AA
         */
        "data"?: string;
        /**
          * Name of the store
         */
        "store"?: string;
    }
    interface KortxyzMaplibre {
        "basemapstyle"?: maplibregl.StyleSpecification | string;
        "bbox"?: string;
        "center"?: string;
        "cooperativeGestures"?: boolean;
        "hoverpopup"?: boolean;
        "map"?: maplibregl.Map;
        "mapboxkey"?: string;
        "mapstyle"?: maplibregl.StyleSpecification | string;
        "showTileBoundaries"?: boolean;
        "zoom"?: number;
    }
    interface KortxyzMaplibreLayer {
        /**
          * (optional) When clicking a feature a new webpage is opened with the link prop. {} can be used to replace with a attribute. https://mypage.org/{ATTRIBUTENAME}
         */
        "clicklink"?: any;
        /**
          * Expression to fitler the layer
         */
        "filter"?: any;
        /**
          * Layout properties for the layer.
         */
        "layout"?: any;
        /**
          * Emit the ID of the first feature clicked
         */
        "onFeatureClicked"?: (event: KortxyzMaplibreLayerCustomEvent<any>) => void;
        /**
          * Paint properties for the layer.
         */
        "paint"?: any;
        /**
          * (optional) When clicking a feature a Popup shows. Accept HTML and replacement of {} with a attribute. \<div>{placename}\</div>
         */
        "popup"?: string | boolean;
        /**
          * Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources.
         */
        "sourceLayer"?: string;
        /**
          * Type of layer
         */
        "type"?: 'circle' | 'line' | 'fill';
    }
    interface KortxyzMaplibreSearchbox {
        /**
          * How to format results. Replacement of {} with a attribute. {ATTRIBUTENAME}
         */
        "result"?: string;
        /**
          * Should a result pick be a marker on the map or a click on the map
         */
        "resulttype"?: "marker" | "click";
        /**
          * How far should the map zoom in on result. Empty prop if no zooming is needed
         */
        "resultzoom"?: number;
        /**
          * Url to make input calls that return a geojson with points. Input are available as {input}
         */
        "url"?: string;
    }
    interface KortxyzMaplibreSource {
        /**
          * add a layer without specifing it ONLY GEOJSON
         */
        "autolayers"?: boolean;
        /**
          * URL to the geojson source.
         */
        "data"?: string;
        /**
          * fit mapbounds to geojsonbounds
         */
        "fit"?: boolean;
        /**
          * Max zoom-level to fetch tiles. z-parameter
         */
        "maxzoom"?: number;
        /**
          * Datastore reference.
         */
        "store"?: string;
        /**
          * Url to the tilesource. e.g. https://demotiles.maplibre.org/tiles/{z}/{x}/{y}.pbf
         */
        "tiles"?: string;
        /**
          * Size of the tiles in px.
         */
        "tilesize"?: number;
        /**
          * Type of source.
         */
        "type"?: 'vector' | 'geojson' | 'raster';
    }
    interface IntrinsicElements {
        "kortxyz-aggrid": KortxyzAggrid;
        "kortxyz-datastore": KortxyzDatastore;
        "kortxyz-maplibre": KortxyzMaplibre;
        "kortxyz-maplibre-layer": KortxyzMaplibreLayer;
        "kortxyz-maplibre-searchbox": KortxyzMaplibreSearchbox;
        "kortxyz-maplibre-source": KortxyzMaplibreSource;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kortxyz-aggrid": LocalJSX.KortxyzAggrid & JSXBase.HTMLAttributes<HTMLKortxyzAggridElement>;
            "kortxyz-datastore": LocalJSX.KortxyzDatastore & JSXBase.HTMLAttributes<HTMLKortxyzDatastoreElement>;
            "kortxyz-maplibre": LocalJSX.KortxyzMaplibre & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreElement>;
            "kortxyz-maplibre-layer": LocalJSX.KortxyzMaplibreLayer & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreLayerElement>;
            "kortxyz-maplibre-searchbox": LocalJSX.KortxyzMaplibreSearchbox & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreSearchboxElement>;
            "kortxyz-maplibre-source": LocalJSX.KortxyzMaplibreSource & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreSourceElement>;
        }
    }
}
