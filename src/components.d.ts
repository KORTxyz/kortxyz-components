/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * ## Intro
     * Webcomponent to show a table. A rowclicked event occurs when a row is clicked 
     * ## Example
     *  Get geojson from a datastore
     * ```html
     * <kortxyz-aggrid
     * store="teststore"
     * ></kortxyz-aggrid>
     * ```
     *  Get geojson from a url
     * ```html
     * <kortxyz-aggrid
     * data="https://example.geojson"
     * ></kortxyz-aggrid>
     * ```
     */
    interface KortxyzAggrid {
        /**
          * Fetch data from a url
         */
        "data": string;
        /**
          * Fetch JSON schema from a url or parse Inline JSON
         */
        "schema"?: any;
        /**
          * Fetch data from a store
         */
        "store": string;
    }
    /**
     * ## Intro
     * Webcomponent to store data that multiple components can use.
     * ## Example
     * ```html
     * <kortxyz-datastore
     * store="teststore"
     * data="https://example.geojson"
     * ></kortxyz-datastore>
     * ```
     */
    interface KortxyzDatastore {
        /**
          * URL to the data to be fetch into the Store AA
         */
        "data"?: string;
        /**
          * Name of the store
         */
        "store"?: string;
    }
    interface KortxyzIcon {
        /**
          * @default "inherit"
         */
        "color": string;
        /**
          * @default 'layers'
         */
        "icon": string;
        /**
          * @default "16"
         */
        "size": string;
    }
    /**
     * ## Intro
     * Webcomponent to show a map based on  [MaplibreGL](https://maplibre.org/).
     * ## Example
     *  Show a demo map 
     * ```html
     * <kortxyz-maplibre 
     *     style="width:100%;height: 200px;display:block"
     *     mapstyle='https://demotiles.maplibre.org/style.json'
     * ></kortxyz-maplibre>
     * ```
     *  Show a map on top a official basemap
     * ```html
     * <kortxyz-maplibre 
     *     style="width:100%;height:500px;display:block;background: whitesmoke;"
     *     bbox="[12.40100150309453,55.6008931492048,12.28220098836423,55.63638904335573]"
     *     mapstyle="./assets/skoledistrikter2024.json"
     *     basemapstyle="https://raw.githubusercontent.com/SDFIdk/vector_tiles_assets/refs/heads/main/styles/official/3857_skaermkort_graa.json"
     * ></kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibre {
        /**
          * Basemapswitcher configuretd by an array of objects or an URL to a OGCAPI - Styles
         */
        "basemaps": string | { title: string; icon: URL; url: URL }[];
        /**
          * A mapstyle used as a basemap below the main map
          * @default {       "version": 8,       "name": "name",       "sources": {       },       "layers": [       ]     }
         */
        "basemapstyle": maplibregl.StyleSpecification | string;
        /**
          * Start bounds of the map. [12.4,55.6,12.282,55.636]
          * @default undefined
         */
        "bbox": string;
        /**
          * Start center of the map
         */
        "center": string;
        /**
          * Disable normal gestures for not getting caught by scrolling
          * @default false
         */
        "cooperativeGestures": boolean;
        /**
          * Opens the geometry editor for a given GeoJSON feature.
          * @param feature A GeoJSON Feature object to edit.
          * @returns A promise that resolves with the edited feature.
         */
        "editGeometry": (feature: any) => Promise<unknown>;
        /**
          * Show a button to toggle fullscreen
          * @default false
         */
        "fullscreen": boolean;
        /**
          * Show a button to locate the user
          * @default false
         */
        "gps": boolean;
        /**
          * Eanble a hoverpopup showing all features beneath the cursor
         */
        "hoverpopup": boolean;
        /**
          * Show a legend for the layers specified in the attibute. Empty if all layers.
          * @default false
         */
        "legend": string | boolean;
        "map": maplibregl.Map;
        /**
          * (optional) Mapboxkey if using styles from mapbox
         */
        "mapboxkey": string;
        /**
          * Mapstyle for the main map
          * @default {       "version": 8,       "name": "name",       "sources": {       },       "layers": [       ]     }
         */
        "mapstyle": maplibregl.StyleSpecification | string;
        /**
          * Show navigation controls
          * @default false
         */
        "navigation": boolean;
        /**
          * Show a scalebar at the bottom
          * @default false
         */
        "scalebar": boolean;
        /**
          * Show the tilegrid
          * @default false
         */
        "showTileBoundaries": boolean;
        /**
          * ID of the element that the button should toogle.
         */
        "togglebutton": string;
        /**
          * Start zoom of the map
         */
        "zoom": number;
    }
    /**
     * ## Intro
     * Webcomponent to load a maplibre layer inside a maplibre source. The layer can be made click interactive be using either clicklink or the popup properties.
     * Paint and Layout properties follow [MapLibre Style Spec](https://maplibre.org/maplibre-style-spec/layers/).
     * ## Example
     *  Show red polygons with a white outline that opens a page when clicked.
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source>
     *        <kortxyz-maplibre-layer
     *            type="line"
     *            paint="{line-color:white}"
     *        ></kortxyz-maplibre-layer>
     *        <kortxyz-maplibre-layer
     *            type="fill"
     *            paint="{fill-color:red}"
     *            clicklink="https://example.com/{placename}"
     *        ></kortxyz-maplibre-layer>
     *    </kortxyz-maplibre-source>
     * </kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibreLayer {
        /**
          * (optional) When clicking a feature a new webpage is opened with the link prop. {} can be used to replace with a attribute. https://mypage.org/{ATTRIBUTENAME}
         */
        "clicklink": any;
        /**
          * Expression to fitler the layer
         */
        "filter": any;
        /**
          * Layer identification.
          * @default Math.random().toString(36).substring(2, 7)
         */
        "layerid": string;
        /**
          * Layout properties for the layer.
          * @default {}
         */
        "layout": any;
        /**
          * Customize legend with a object like this {name:string,unit:string,labels:object (Map a value to a text that replaces it as a label) }
          * @default {}
         */
        "legendMetadata": any;
        /**
          * Paint properties for the layer.
          * @default {}
         */
        "paint": any;
        /**
          * (optional) When clicking a feature a Popup shows. Accept HTML and replacement of {} with a attribute. \<div>{placename}\</div>
         */
        "popup": string | boolean;
        /**
          * Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources.
         */
        "sourceLayer"?: string;
        /**
          * Type of layer
          * @default 'fill'
         */
        "type": 'circle' | 'line' | 'fill';
    }
    interface KortxyzMaplibreLayerlist {
    }
    /**
     * ### Intro
     * Webcomponent to use inside kortxyz-maplibre to search for a point.
     * ### Example
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-searchbox
     *        url="https://api.dataforsyningen.dk/adgangsadresser?q={input}&format=geojson&per_side=5&struktur=mini&autocomplete&kommunekode=183&fuzzy"
     *        result="{betegnelse}"
     *    ></kortxyz-maplibre-searchbox>
     * <kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibreSearchbox {
        /**
          * How to format results. Replacement of {} with a attribute. {ATTRIBUTENAME}
          * @default "{betegnelse}"
         */
        "result": string;
        /**
          * Should a result pick be a marker on the map or a click on the map
          * @default "marker"
         */
        "resulttype": "marker" | "click";
        /**
          * How far should the map zoom in on result. Empty prop if no zooming is needed
          * @default 14
         */
        "resultzoom": number;
        /**
          * Url to make input calls that return a geojson with points. Input are available as {input}
          * @default "https://api.dataforsyningen.dk/adgangsadresser?q={input}&format=geojson&per_side=5&struktur=mini&autocomplete&kommunekode=183&fuzzy"
         */
        "url": string;
    }
    /**
     * ## Intro
     * Webcomponent load a new source into a kortxyz-maplibre component. An id is autogenerated if not present.
     * ## Example
     *  Load a geojson source
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source
     *        id="afstemningsomraader"
     *        data="https://api.dataforsyningen.dk/afstemningsomraader?kommunekode=183&&format=geojson"
     *    ></kortxyz-maplibre-source>
     * <kortxyz-maplibre>
     * ```
     *  Load a raster source
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source
     *        id="orto_foraar_webm"
     *        type="raster"
     *        tilesize="256" 
     *        maxzoom="20" 
     *        tiles="https://api.dataforsyningen.dk/orto_foraar_webm_DAF?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=orto_foraar_webm&STYLE=default&FORMAT=image%2Fjpeg&TILEMATRIXSET=DFD_GoogleMapsCompatible&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&token=<INSERT TOKEN>">
     *    ></kortxyz-maplibre-source>
     * <kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibreSource {
        /**
          * add a layer without specifing it. If no kortxyz-maplibre-layer children, it is automatically set to true.
          * @default false
         */
        "autolayers": boolean;
        /**
          * URL to the geojson source.
         */
        "data": string;
        /**
          * fit mapbounds to geojsonbounds
          * @default false
         */
        "fit": boolean;
        /**
          * Max zoom-level to fetch tiles. z-parameter
          * @default 14
         */
        "maxzoom": number;
        /**
          * Source identification
          * @default Math.random().toString(36).substring(2,7)
         */
        "sourceid": string;
        /**
          * Datastore reference.
         */
        "store": string;
        /**
          * Url to the tilesource. e.g. https://demotiles.maplibre.org/tiles/{z}/{x}/{y}.pbf
         */
        "tiles": string;
        /**
          * Size of the tiles in px.
          * @default 512
         */
        "tilesize": number;
        /**
          * Type of source.
          * @default 'geojson'
         */
        "type": 'vector' | 'geojson' | 'raster';
    }
    interface KortxyzOgcapiCollectionlist {
        /**
          * Url to a OGC API
         */
        "url": any;
    }
    interface KortxyzShell {
    }
    interface KortxyzSidebar {
    }
    interface KortxyzSidebarButton {
        /**
          * Which icon to use from kortxyz-icon
          * @default "layers"
         */
        "icon": string;
        /**
          * Where in the sidebar to place the button
          * @default "top"
         */
        "placement": "top"|"middle"|"bottom";
    }
    interface KortxyzSidebarPanel {
        /**
          * Controls if the panel should be shown or not.
          * @default true
         */
        "closed": boolean;
    }
    /**
     * ## Intro
     * Webcomponent to visualise data on charts.
     * ## Example
     * ### From data url
     * ```html
     * <kortxyz-tauchart
     *   data="https://geodk.kort.xyz/collections/bygning/items?limit=100&properties=vertikalnoejagtighed,plannoejagtighed,planstedfaestelsesmetode"
     *   type="scatterplot"
     *   y="vertikalnoejagtighed"
     *   x="plannoejagtighed"
     *   color="planstedfaestelsesmetode"
     *   tooltip
     *   legend
     * ></kortxyz-tauchart>
     * ```
     * ### From store
     * ```html
     * <kortxyz-datastore style="visibility: hidden;"
     *   store="items" 
     *   data="https://geodk.kort.xyz/collections/vejmidte/items?limit=7000&properties=Trafikart,Vejkategori,Vejmidtetype"
     * ></kortxyz-datastore>
     * <kortxyz-tauchart
     *   store="items"
     *   type="horizontal-stacked-bar"
     *   y="vejkategori"
     *   x="count"
     *   color="trafikart"
     *   colorbrewer="Dark2"
     *   group-by-keys="trafikart,vejkategori,vejmidtetype"
     *   tooltip
     *   legend
     * ></kortxyz-tauchart>
     * ```
     */
    interface KortxyzTauchart {
        /**
          * Attribute to use for color
         */
        "color": string;
        /**
          * Colorscheme based on Colorbrewer2
         */
        "colorbrewer": string;
        /**
          * Fetch data from a url
         */
        "data": string;
        /**
          * Group data by these keys returning a attribute called "count"
         */
        "groupByKeys": string;
        /**
          * Add a legend
          * @default false
         */
        "legend": boolean;
        /**
          * Fetch data from a store
         */
        "store": string;
        /**
          * Show tooltips on hover
          * @default false
         */
        "tooltip": boolean;
        /**
          * Type of chart
         */
        "type": "map" | "bar" | "horizontal-bar" | "horizontal-stacked-bar" | "line" | "parallel" | "scatterplot" | "stacked-area" | "stacked-bar";
        /**
          * Attribute to use on the x axis
         */
        "x": string;
        /**
          * Attribute to use on the y axis
         */
        "y": string;
    }
}
export interface KortxyzAggridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKortxyzAggridElement;
}
export interface KortxyzMaplibreLayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKortxyzMaplibreLayerElement;
}
export interface KortxyzSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKortxyzSidebarElement;
}
export interface KortxyzSidebarButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKortxyzSidebarButtonElement;
}
declare global {
    interface HTMLKortxyzAggridElementEventMap {
        "rowClicked": any;
    }
    /**
     * ## Intro
     * Webcomponent to show a table. A rowclicked event occurs when a row is clicked 
     * ## Example
     *  Get geojson from a datastore
     * ```html
     * <kortxyz-aggrid
     * store="teststore"
     * ></kortxyz-aggrid>
     * ```
     *  Get geojson from a url
     * ```html
     * <kortxyz-aggrid
     * data="https://example.geojson"
     * ></kortxyz-aggrid>
     * ```
     */
    interface HTMLKortxyzAggridElement extends Components.KortxyzAggrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKortxyzAggridElementEventMap>(type: K, listener: (this: HTMLKortxyzAggridElement, ev: KortxyzAggridCustomEvent<HTMLKortxyzAggridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKortxyzAggridElementEventMap>(type: K, listener: (this: HTMLKortxyzAggridElement, ev: KortxyzAggridCustomEvent<HTMLKortxyzAggridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKortxyzAggridElement: {
        prototype: HTMLKortxyzAggridElement;
        new (): HTMLKortxyzAggridElement;
    };
    /**
     * ## Intro
     * Webcomponent to store data that multiple components can use.
     * ## Example
     * ```html
     * <kortxyz-datastore
     * store="teststore"
     * data="https://example.geojson"
     * ></kortxyz-datastore>
     * ```
     */
    interface HTMLKortxyzDatastoreElement extends Components.KortxyzDatastore, HTMLStencilElement {
    }
    var HTMLKortxyzDatastoreElement: {
        prototype: HTMLKortxyzDatastoreElement;
        new (): HTMLKortxyzDatastoreElement;
    };
    interface HTMLKortxyzIconElement extends Components.KortxyzIcon, HTMLStencilElement {
    }
    var HTMLKortxyzIconElement: {
        prototype: HTMLKortxyzIconElement;
        new (): HTMLKortxyzIconElement;
    };
    /**
     * ## Intro
     * Webcomponent to show a map based on  [MaplibreGL](https://maplibre.org/).
     * ## Example
     *  Show a demo map 
     * ```html
     * <kortxyz-maplibre 
     *     style="width:100%;height: 200px;display:block"
     *     mapstyle='https://demotiles.maplibre.org/style.json'
     * ></kortxyz-maplibre>
     * ```
     *  Show a map on top a official basemap
     * ```html
     * <kortxyz-maplibre 
     *     style="width:100%;height:500px;display:block;background: whitesmoke;"
     *     bbox="[12.40100150309453,55.6008931492048,12.28220098836423,55.63638904335573]"
     *     mapstyle="./assets/skoledistrikter2024.json"
     *     basemapstyle="https://raw.githubusercontent.com/SDFIdk/vector_tiles_assets/refs/heads/main/styles/official/3857_skaermkort_graa.json"
     * ></kortxyz-maplibre>
     * ```
     */
    interface HTMLKortxyzMaplibreElement extends Components.KortxyzMaplibre, HTMLStencilElement {
    }
    var HTMLKortxyzMaplibreElement: {
        prototype: HTMLKortxyzMaplibreElement;
        new (): HTMLKortxyzMaplibreElement;
    };
    interface HTMLKortxyzMaplibreLayerElementEventMap {
        "featureClicked": any;
    }
    /**
     * ## Intro
     * Webcomponent to load a maplibre layer inside a maplibre source. The layer can be made click interactive be using either clicklink or the popup properties.
     * Paint and Layout properties follow [MapLibre Style Spec](https://maplibre.org/maplibre-style-spec/layers/).
     * ## Example
     *  Show red polygons with a white outline that opens a page when clicked.
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source>
     *        <kortxyz-maplibre-layer
     *            type="line"
     *            paint="{line-color:white}"
     *        ></kortxyz-maplibre-layer>
     *        <kortxyz-maplibre-layer
     *            type="fill"
     *            paint="{fill-color:red}"
     *            clicklink="https://example.com/{placename}"
     *        ></kortxyz-maplibre-layer>
     *    </kortxyz-maplibre-source>
     * </kortxyz-maplibre>
     * ```
     */
    interface HTMLKortxyzMaplibreLayerElement extends Components.KortxyzMaplibreLayer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKortxyzMaplibreLayerElementEventMap>(type: K, listener: (this: HTMLKortxyzMaplibreLayerElement, ev: KortxyzMaplibreLayerCustomEvent<HTMLKortxyzMaplibreLayerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKortxyzMaplibreLayerElementEventMap>(type: K, listener: (this: HTMLKortxyzMaplibreLayerElement, ev: KortxyzMaplibreLayerCustomEvent<HTMLKortxyzMaplibreLayerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKortxyzMaplibreLayerElement: {
        prototype: HTMLKortxyzMaplibreLayerElement;
        new (): HTMLKortxyzMaplibreLayerElement;
    };
    interface HTMLKortxyzMaplibreLayerlistElement extends Components.KortxyzMaplibreLayerlist, HTMLStencilElement {
    }
    var HTMLKortxyzMaplibreLayerlistElement: {
        prototype: HTMLKortxyzMaplibreLayerlistElement;
        new (): HTMLKortxyzMaplibreLayerlistElement;
    };
    /**
     * ### Intro
     * Webcomponent to use inside kortxyz-maplibre to search for a point.
     * ### Example
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-searchbox
     *        url="https://api.dataforsyningen.dk/adgangsadresser?q={input}&format=geojson&per_side=5&struktur=mini&autocomplete&kommunekode=183&fuzzy"
     *        result="{betegnelse}"
     *    ></kortxyz-maplibre-searchbox>
     * <kortxyz-maplibre>
     * ```
     */
    interface HTMLKortxyzMaplibreSearchboxElement extends Components.KortxyzMaplibreSearchbox, HTMLStencilElement {
    }
    var HTMLKortxyzMaplibreSearchboxElement: {
        prototype: HTMLKortxyzMaplibreSearchboxElement;
        new (): HTMLKortxyzMaplibreSearchboxElement;
    };
    /**
     * ## Intro
     * Webcomponent load a new source into a kortxyz-maplibre component. An id is autogenerated if not present.
     * ## Example
     *  Load a geojson source
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source
     *        id="afstemningsomraader"
     *        data="https://api.dataforsyningen.dk/afstemningsomraader?kommunekode=183&&format=geojson"
     *    ></kortxyz-maplibre-source>
     * <kortxyz-maplibre>
     * ```
     *  Load a raster source
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source
     *        id="orto_foraar_webm"
     *        type="raster"
     *        tilesize="256" 
     *        maxzoom="20" 
     *        tiles="https://api.dataforsyningen.dk/orto_foraar_webm_DAF?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=orto_foraar_webm&STYLE=default&FORMAT=image%2Fjpeg&TILEMATRIXSET=DFD_GoogleMapsCompatible&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&token=<INSERT TOKEN>">
     *    ></kortxyz-maplibre-source>
     * <kortxyz-maplibre>
     * ```
     */
    interface HTMLKortxyzMaplibreSourceElement extends Components.KortxyzMaplibreSource, HTMLStencilElement {
    }
    var HTMLKortxyzMaplibreSourceElement: {
        prototype: HTMLKortxyzMaplibreSourceElement;
        new (): HTMLKortxyzMaplibreSourceElement;
    };
    interface HTMLKortxyzOgcapiCollectionlistElement extends Components.KortxyzOgcapiCollectionlist, HTMLStencilElement {
    }
    var HTMLKortxyzOgcapiCollectionlistElement: {
        prototype: HTMLKortxyzOgcapiCollectionlistElement;
        new (): HTMLKortxyzOgcapiCollectionlistElement;
    };
    interface HTMLKortxyzShellElement extends Components.KortxyzShell, HTMLStencilElement {
    }
    var HTMLKortxyzShellElement: {
        prototype: HTMLKortxyzShellElement;
        new (): HTMLKortxyzShellElement;
    };
    interface HTMLKortxyzSidebarElementEventMap {
        "openPanel": any;
    }
    interface HTMLKortxyzSidebarElement extends Components.KortxyzSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKortxyzSidebarElementEventMap>(type: K, listener: (this: HTMLKortxyzSidebarElement, ev: KortxyzSidebarCustomEvent<HTMLKortxyzSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKortxyzSidebarElementEventMap>(type: K, listener: (this: HTMLKortxyzSidebarElement, ev: KortxyzSidebarCustomEvent<HTMLKortxyzSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKortxyzSidebarElement: {
        prototype: HTMLKortxyzSidebarElement;
        new (): HTMLKortxyzSidebarElement;
    };
    interface HTMLKortxyzSidebarButtonElementEventMap {
        "toggleRequest": any;
    }
    interface HTMLKortxyzSidebarButtonElement extends Components.KortxyzSidebarButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKortxyzSidebarButtonElementEventMap>(type: K, listener: (this: HTMLKortxyzSidebarButtonElement, ev: KortxyzSidebarButtonCustomEvent<HTMLKortxyzSidebarButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKortxyzSidebarButtonElementEventMap>(type: K, listener: (this: HTMLKortxyzSidebarButtonElement, ev: KortxyzSidebarButtonCustomEvent<HTMLKortxyzSidebarButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKortxyzSidebarButtonElement: {
        prototype: HTMLKortxyzSidebarButtonElement;
        new (): HTMLKortxyzSidebarButtonElement;
    };
    interface HTMLKortxyzSidebarPanelElement extends Components.KortxyzSidebarPanel, HTMLStencilElement {
    }
    var HTMLKortxyzSidebarPanelElement: {
        prototype: HTMLKortxyzSidebarPanelElement;
        new (): HTMLKortxyzSidebarPanelElement;
    };
    /**
     * ## Intro
     * Webcomponent to visualise data on charts.
     * ## Example
     * ### From data url
     * ```html
     * <kortxyz-tauchart
     *   data="https://geodk.kort.xyz/collections/bygning/items?limit=100&properties=vertikalnoejagtighed,plannoejagtighed,planstedfaestelsesmetode"
     *   type="scatterplot"
     *   y="vertikalnoejagtighed"
     *   x="plannoejagtighed"
     *   color="planstedfaestelsesmetode"
     *   tooltip
     *   legend
     * ></kortxyz-tauchart>
     * ```
     * ### From store
     * ```html
     * <kortxyz-datastore style="visibility: hidden;"
     *   store="items" 
     *   data="https://geodk.kort.xyz/collections/vejmidte/items?limit=7000&properties=Trafikart,Vejkategori,Vejmidtetype"
     * ></kortxyz-datastore>
     * <kortxyz-tauchart
     *   store="items"
     *   type="horizontal-stacked-bar"
     *   y="vejkategori"
     *   x="count"
     *   color="trafikart"
     *   colorbrewer="Dark2"
     *   group-by-keys="trafikart,vejkategori,vejmidtetype"
     *   tooltip
     *   legend
     * ></kortxyz-tauchart>
     * ```
     */
    interface HTMLKortxyzTauchartElement extends Components.KortxyzTauchart, HTMLStencilElement {
    }
    var HTMLKortxyzTauchartElement: {
        prototype: HTMLKortxyzTauchartElement;
        new (): HTMLKortxyzTauchartElement;
    };
    interface HTMLElementTagNameMap {
        "kortxyz-aggrid": HTMLKortxyzAggridElement;
        "kortxyz-datastore": HTMLKortxyzDatastoreElement;
        "kortxyz-icon": HTMLKortxyzIconElement;
        "kortxyz-maplibre": HTMLKortxyzMaplibreElement;
        "kortxyz-maplibre-layer": HTMLKortxyzMaplibreLayerElement;
        "kortxyz-maplibre-layerlist": HTMLKortxyzMaplibreLayerlistElement;
        "kortxyz-maplibre-searchbox": HTMLKortxyzMaplibreSearchboxElement;
        "kortxyz-maplibre-source": HTMLKortxyzMaplibreSourceElement;
        "kortxyz-ogcapi-collectionlist": HTMLKortxyzOgcapiCollectionlistElement;
        "kortxyz-shell": HTMLKortxyzShellElement;
        "kortxyz-sidebar": HTMLKortxyzSidebarElement;
        "kortxyz-sidebar-button": HTMLKortxyzSidebarButtonElement;
        "kortxyz-sidebar-panel": HTMLKortxyzSidebarPanelElement;
        "kortxyz-tauchart": HTMLKortxyzTauchartElement;
    }
}
declare namespace LocalJSX {
    /**
     * ## Intro
     * Webcomponent to show a table. A rowclicked event occurs when a row is clicked 
     * ## Example
     *  Get geojson from a datastore
     * ```html
     * <kortxyz-aggrid
     * store="teststore"
     * ></kortxyz-aggrid>
     * ```
     *  Get geojson from a url
     * ```html
     * <kortxyz-aggrid
     * data="https://example.geojson"
     * ></kortxyz-aggrid>
     * ```
     */
    interface KortxyzAggrid {
        /**
          * Fetch data from a url
         */
        "data"?: string;
        /**
          * Event when row is clicked
         */
        "onRowClicked"?: (event: KortxyzAggridCustomEvent<any>) => void;
        /**
          * Fetch JSON schema from a url or parse Inline JSON
         */
        "schema"?: any;
        /**
          * Fetch data from a store
         */
        "store"?: string;
    }
    /**
     * ## Intro
     * Webcomponent to store data that multiple components can use.
     * ## Example
     * ```html
     * <kortxyz-datastore
     * store="teststore"
     * data="https://example.geojson"
     * ></kortxyz-datastore>
     * ```
     */
    interface KortxyzDatastore {
        /**
          * URL to the data to be fetch into the Store AA
         */
        "data"?: string;
        /**
          * Name of the store
         */
        "store"?: string;
    }
    interface KortxyzIcon {
        /**
          * @default "inherit"
         */
        "color"?: string;
        /**
          * @default 'layers'
         */
        "icon"?: string;
        /**
          * @default "16"
         */
        "size"?: string;
    }
    /**
     * ## Intro
     * Webcomponent to show a map based on  [MaplibreGL](https://maplibre.org/).
     * ## Example
     *  Show a demo map 
     * ```html
     * <kortxyz-maplibre 
     *     style="width:100%;height: 200px;display:block"
     *     mapstyle='https://demotiles.maplibre.org/style.json'
     * ></kortxyz-maplibre>
     * ```
     *  Show a map on top a official basemap
     * ```html
     * <kortxyz-maplibre 
     *     style="width:100%;height:500px;display:block;background: whitesmoke;"
     *     bbox="[12.40100150309453,55.6008931492048,12.28220098836423,55.63638904335573]"
     *     mapstyle="./assets/skoledistrikter2024.json"
     *     basemapstyle="https://raw.githubusercontent.com/SDFIdk/vector_tiles_assets/refs/heads/main/styles/official/3857_skaermkort_graa.json"
     * ></kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibre {
        /**
          * Basemapswitcher configuretd by an array of objects or an URL to a OGCAPI - Styles
         */
        "basemaps"?: string | { title: string; icon: URL; url: URL }[];
        /**
          * A mapstyle used as a basemap below the main map
          * @default {       "version": 8,       "name": "name",       "sources": {       },       "layers": [       ]     }
         */
        "basemapstyle"?: maplibregl.StyleSpecification | string;
        /**
          * Start bounds of the map. [12.4,55.6,12.282,55.636]
          * @default undefined
         */
        "bbox"?: string;
        /**
          * Start center of the map
         */
        "center"?: string;
        /**
          * Disable normal gestures for not getting caught by scrolling
          * @default false
         */
        "cooperativeGestures"?: boolean;
        /**
          * Show a button to toggle fullscreen
          * @default false
         */
        "fullscreen"?: boolean;
        /**
          * Show a button to locate the user
          * @default false
         */
        "gps"?: boolean;
        /**
          * Eanble a hoverpopup showing all features beneath the cursor
         */
        "hoverpopup"?: boolean;
        /**
          * Show a legend for the layers specified in the attibute. Empty if all layers.
          * @default false
         */
        "legend"?: string | boolean;
        "map"?: maplibregl.Map;
        /**
          * (optional) Mapboxkey if using styles from mapbox
         */
        "mapboxkey"?: string;
        /**
          * Mapstyle for the main map
          * @default {       "version": 8,       "name": "name",       "sources": {       },       "layers": [       ]     }
         */
        "mapstyle"?: maplibregl.StyleSpecification | string;
        /**
          * Show navigation controls
          * @default false
         */
        "navigation"?: boolean;
        /**
          * Show a scalebar at the bottom
          * @default false
         */
        "scalebar"?: boolean;
        /**
          * Show the tilegrid
          * @default false
         */
        "showTileBoundaries"?: boolean;
        /**
          * ID of the element that the button should toogle.
         */
        "togglebutton"?: string;
        /**
          * Start zoom of the map
         */
        "zoom"?: number;
    }
    /**
     * ## Intro
     * Webcomponent to load a maplibre layer inside a maplibre source. The layer can be made click interactive be using either clicklink or the popup properties.
     * Paint and Layout properties follow [MapLibre Style Spec](https://maplibre.org/maplibre-style-spec/layers/).
     * ## Example
     *  Show red polygons with a white outline that opens a page when clicked.
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source>
     *        <kortxyz-maplibre-layer
     *            type="line"
     *            paint="{line-color:white}"
     *        ></kortxyz-maplibre-layer>
     *        <kortxyz-maplibre-layer
     *            type="fill"
     *            paint="{fill-color:red}"
     *            clicklink="https://example.com/{placename}"
     *        ></kortxyz-maplibre-layer>
     *    </kortxyz-maplibre-source>
     * </kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibreLayer {
        /**
          * (optional) When clicking a feature a new webpage is opened with the link prop. {} can be used to replace with a attribute. https://mypage.org/{ATTRIBUTENAME}
         */
        "clicklink"?: any;
        /**
          * Expression to fitler the layer
         */
        "filter"?: any;
        /**
          * Layer identification.
          * @default Math.random().toString(36).substring(2, 7)
         */
        "layerid"?: string;
        /**
          * Layout properties for the layer.
          * @default {}
         */
        "layout"?: any;
        /**
          * Customize legend with a object like this {name:string,unit:string,labels:object (Map a value to a text that replaces it as a label) }
          * @default {}
         */
        "legendMetadata"?: any;
        /**
          * Emit the ID of the first feature clicked
         */
        "onFeatureClicked"?: (event: KortxyzMaplibreLayerCustomEvent<any>) => void;
        /**
          * Paint properties for the layer.
          * @default {}
         */
        "paint"?: any;
        /**
          * (optional) When clicking a feature a Popup shows. Accept HTML and replacement of {} with a attribute. \<div>{placename}\</div>
         */
        "popup"?: string | boolean;
        /**
          * Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources.
         */
        "sourceLayer"?: string;
        /**
          * Type of layer
          * @default 'fill'
         */
        "type"?: 'circle' | 'line' | 'fill';
    }
    interface KortxyzMaplibreLayerlist {
    }
    /**
     * ### Intro
     * Webcomponent to use inside kortxyz-maplibre to search for a point.
     * ### Example
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-searchbox
     *        url="https://api.dataforsyningen.dk/adgangsadresser?q={input}&format=geojson&per_side=5&struktur=mini&autocomplete&kommunekode=183&fuzzy"
     *        result="{betegnelse}"
     *    ></kortxyz-maplibre-searchbox>
     * <kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibreSearchbox {
        /**
          * How to format results. Replacement of {} with a attribute. {ATTRIBUTENAME}
          * @default "{betegnelse}"
         */
        "result"?: string;
        /**
          * Should a result pick be a marker on the map or a click on the map
          * @default "marker"
         */
        "resulttype"?: "marker" | "click";
        /**
          * How far should the map zoom in on result. Empty prop if no zooming is needed
          * @default 14
         */
        "resultzoom"?: number;
        /**
          * Url to make input calls that return a geojson with points. Input are available as {input}
          * @default "https://api.dataforsyningen.dk/adgangsadresser?q={input}&format=geojson&per_side=5&struktur=mini&autocomplete&kommunekode=183&fuzzy"
         */
        "url"?: string;
    }
    /**
     * ## Intro
     * Webcomponent load a new source into a kortxyz-maplibre component. An id is autogenerated if not present.
     * ## Example
     *  Load a geojson source
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source
     *        id="afstemningsomraader"
     *        data="https://api.dataforsyningen.dk/afstemningsomraader?kommunekode=183&&format=geojson"
     *    ></kortxyz-maplibre-source>
     * <kortxyz-maplibre>
     * ```
     *  Load a raster source
     * ```html
     * <kortxyz-maplibre>
     *    <kortxyz-maplibre-source
     *        id="orto_foraar_webm"
     *        type="raster"
     *        tilesize="256" 
     *        maxzoom="20" 
     *        tiles="https://api.dataforsyningen.dk/orto_foraar_webm_DAF?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=orto_foraar_webm&STYLE=default&FORMAT=image%2Fjpeg&TILEMATRIXSET=DFD_GoogleMapsCompatible&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&token=<INSERT TOKEN>">
     *    ></kortxyz-maplibre-source>
     * <kortxyz-maplibre>
     * ```
     */
    interface KortxyzMaplibreSource {
        /**
          * add a layer without specifing it. If no kortxyz-maplibre-layer children, it is automatically set to true.
          * @default false
         */
        "autolayers"?: boolean;
        /**
          * URL to the geojson source.
         */
        "data"?: string;
        /**
          * fit mapbounds to geojsonbounds
          * @default false
         */
        "fit"?: boolean;
        /**
          * Max zoom-level to fetch tiles. z-parameter
          * @default 14
         */
        "maxzoom"?: number;
        /**
          * Source identification
          * @default Math.random().toString(36).substring(2,7)
         */
        "sourceid"?: string;
        /**
          * Datastore reference.
         */
        "store"?: string;
        /**
          * Url to the tilesource. e.g. https://demotiles.maplibre.org/tiles/{z}/{x}/{y}.pbf
         */
        "tiles"?: string;
        /**
          * Size of the tiles in px.
          * @default 512
         */
        "tilesize"?: number;
        /**
          * Type of source.
          * @default 'geojson'
         */
        "type"?: 'vector' | 'geojson' | 'raster';
    }
    interface KortxyzOgcapiCollectionlist {
        /**
          * Url to a OGC API
         */
        "url"?: any;
    }
    interface KortxyzShell {
    }
    interface KortxyzSidebar {
        "onOpenPanel"?: (event: KortxyzSidebarCustomEvent<any>) => void;
    }
    interface KortxyzSidebarButton {
        /**
          * Which icon to use from kortxyz-icon
          * @default "layers"
         */
        "icon"?: string;
        "onToggleRequest"?: (event: KortxyzSidebarButtonCustomEvent<any>) => void;
        /**
          * Where in the sidebar to place the button
          * @default "top"
         */
        "placement"?: "top"|"middle"|"bottom";
    }
    interface KortxyzSidebarPanel {
        /**
          * Controls if the panel should be shown or not.
          * @default true
         */
        "closed"?: boolean;
    }
    /**
     * ## Intro
     * Webcomponent to visualise data on charts.
     * ## Example
     * ### From data url
     * ```html
     * <kortxyz-tauchart
     *   data="https://geodk.kort.xyz/collections/bygning/items?limit=100&properties=vertikalnoejagtighed,plannoejagtighed,planstedfaestelsesmetode"
     *   type="scatterplot"
     *   y="vertikalnoejagtighed"
     *   x="plannoejagtighed"
     *   color="planstedfaestelsesmetode"
     *   tooltip
     *   legend
     * ></kortxyz-tauchart>
     * ```
     * ### From store
     * ```html
     * <kortxyz-datastore style="visibility: hidden;"
     *   store="items" 
     *   data="https://geodk.kort.xyz/collections/vejmidte/items?limit=7000&properties=Trafikart,Vejkategori,Vejmidtetype"
     * ></kortxyz-datastore>
     * <kortxyz-tauchart
     *   store="items"
     *   type="horizontal-stacked-bar"
     *   y="vejkategori"
     *   x="count"
     *   color="trafikart"
     *   colorbrewer="Dark2"
     *   group-by-keys="trafikart,vejkategori,vejmidtetype"
     *   tooltip
     *   legend
     * ></kortxyz-tauchart>
     * ```
     */
    interface KortxyzTauchart {
        /**
          * Attribute to use for color
         */
        "color"?: string;
        /**
          * Colorscheme based on Colorbrewer2
         */
        "colorbrewer"?: string;
        /**
          * Fetch data from a url
         */
        "data"?: string;
        /**
          * Group data by these keys returning a attribute called "count"
         */
        "groupByKeys"?: string;
        /**
          * Add a legend
          * @default false
         */
        "legend"?: boolean;
        /**
          * Fetch data from a store
         */
        "store"?: string;
        /**
          * Show tooltips on hover
          * @default false
         */
        "tooltip"?: boolean;
        /**
          * Type of chart
         */
        "type"?: "map" | "bar" | "horizontal-bar" | "horizontal-stacked-bar" | "line" | "parallel" | "scatterplot" | "stacked-area" | "stacked-bar";
        /**
          * Attribute to use on the x axis
         */
        "x"?: string;
        /**
          * Attribute to use on the y axis
         */
        "y"?: string;
    }
    interface IntrinsicElements {
        "kortxyz-aggrid": KortxyzAggrid;
        "kortxyz-datastore": KortxyzDatastore;
        "kortxyz-icon": KortxyzIcon;
        "kortxyz-maplibre": KortxyzMaplibre;
        "kortxyz-maplibre-layer": KortxyzMaplibreLayer;
        "kortxyz-maplibre-layerlist": KortxyzMaplibreLayerlist;
        "kortxyz-maplibre-searchbox": KortxyzMaplibreSearchbox;
        "kortxyz-maplibre-source": KortxyzMaplibreSource;
        "kortxyz-ogcapi-collectionlist": KortxyzOgcapiCollectionlist;
        "kortxyz-shell": KortxyzShell;
        "kortxyz-sidebar": KortxyzSidebar;
        "kortxyz-sidebar-button": KortxyzSidebarButton;
        "kortxyz-sidebar-panel": KortxyzSidebarPanel;
        "kortxyz-tauchart": KortxyzTauchart;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * ## Intro
             * Webcomponent to show a table. A rowclicked event occurs when a row is clicked 
             * ## Example
             *  Get geojson from a datastore
             * ```html
             * <kortxyz-aggrid
             * store="teststore"
             * ></kortxyz-aggrid>
             * ```
             *  Get geojson from a url
             * ```html
             * <kortxyz-aggrid
             * data="https://example.geojson"
             * ></kortxyz-aggrid>
             * ```
             */
            "kortxyz-aggrid": LocalJSX.KortxyzAggrid & JSXBase.HTMLAttributes<HTMLKortxyzAggridElement>;
            /**
             * ## Intro
             * Webcomponent to store data that multiple components can use.
             * ## Example
             * ```html
             * <kortxyz-datastore
             * store="teststore"
             * data="https://example.geojson"
             * ></kortxyz-datastore>
             * ```
             */
            "kortxyz-datastore": LocalJSX.KortxyzDatastore & JSXBase.HTMLAttributes<HTMLKortxyzDatastoreElement>;
            "kortxyz-icon": LocalJSX.KortxyzIcon & JSXBase.HTMLAttributes<HTMLKortxyzIconElement>;
            /**
             * ## Intro
             * Webcomponent to show a map based on  [MaplibreGL](https://maplibre.org/).
             * ## Example
             *  Show a demo map 
             * ```html
             * <kortxyz-maplibre 
             *     style="width:100%;height: 200px;display:block"
             *     mapstyle='https://demotiles.maplibre.org/style.json'
             * ></kortxyz-maplibre>
             * ```
             *  Show a map on top a official basemap
             * ```html
             * <kortxyz-maplibre 
             *     style="width:100%;height:500px;display:block;background: whitesmoke;"
             *     bbox="[12.40100150309453,55.6008931492048,12.28220098836423,55.63638904335573]"
             *     mapstyle="./assets/skoledistrikter2024.json"
             *     basemapstyle="https://raw.githubusercontent.com/SDFIdk/vector_tiles_assets/refs/heads/main/styles/official/3857_skaermkort_graa.json"
             * ></kortxyz-maplibre>
             * ```
             */
            "kortxyz-maplibre": LocalJSX.KortxyzMaplibre & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreElement>;
            /**
             * ## Intro
             * Webcomponent to load a maplibre layer inside a maplibre source. The layer can be made click interactive be using either clicklink or the popup properties.
             * Paint and Layout properties follow [MapLibre Style Spec](https://maplibre.org/maplibre-style-spec/layers/).
             * ## Example
             *  Show red polygons with a white outline that opens a page when clicked.
             * ```html
             * <kortxyz-maplibre>
             *    <kortxyz-maplibre-source>
             *        <kortxyz-maplibre-layer
             *            type="line"
             *            paint="{line-color:white}"
             *        ></kortxyz-maplibre-layer>
             *        <kortxyz-maplibre-layer
             *            type="fill"
             *            paint="{fill-color:red}"
             *            clicklink="https://example.com/{placename}"
             *        ></kortxyz-maplibre-layer>
             *    </kortxyz-maplibre-source>
             * </kortxyz-maplibre>
             * ```
             */
            "kortxyz-maplibre-layer": LocalJSX.KortxyzMaplibreLayer & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreLayerElement>;
            "kortxyz-maplibre-layerlist": LocalJSX.KortxyzMaplibreLayerlist & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreLayerlistElement>;
            /**
             * ### Intro
             * Webcomponent to use inside kortxyz-maplibre to search for a point.
             * ### Example
             * ```html
             * <kortxyz-maplibre>
             *    <kortxyz-maplibre-searchbox
             *        url="https://api.dataforsyningen.dk/adgangsadresser?q={input}&format=geojson&per_side=5&struktur=mini&autocomplete&kommunekode=183&fuzzy"
             *        result="{betegnelse}"
             *    ></kortxyz-maplibre-searchbox>
             * <kortxyz-maplibre>
             * ```
             */
            "kortxyz-maplibre-searchbox": LocalJSX.KortxyzMaplibreSearchbox & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreSearchboxElement>;
            /**
             * ## Intro
             * Webcomponent load a new source into a kortxyz-maplibre component. An id is autogenerated if not present.
             * ## Example
             *  Load a geojson source
             * ```html
             * <kortxyz-maplibre>
             *    <kortxyz-maplibre-source
             *        id="afstemningsomraader"
             *        data="https://api.dataforsyningen.dk/afstemningsomraader?kommunekode=183&&format=geojson"
             *    ></kortxyz-maplibre-source>
             * <kortxyz-maplibre>
             * ```
             *  Load a raster source
             * ```html
             * <kortxyz-maplibre>
             *    <kortxyz-maplibre-source
             *        id="orto_foraar_webm"
             *        type="raster"
             *        tilesize="256" 
             *        maxzoom="20" 
             *        tiles="https://api.dataforsyningen.dk/orto_foraar_webm_DAF?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=orto_foraar_webm&STYLE=default&FORMAT=image%2Fjpeg&TILEMATRIXSET=DFD_GoogleMapsCompatible&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&token=<INSERT TOKEN>">
             *    ></kortxyz-maplibre-source>
             * <kortxyz-maplibre>
             * ```
             */
            "kortxyz-maplibre-source": LocalJSX.KortxyzMaplibreSource & JSXBase.HTMLAttributes<HTMLKortxyzMaplibreSourceElement>;
            "kortxyz-ogcapi-collectionlist": LocalJSX.KortxyzOgcapiCollectionlist & JSXBase.HTMLAttributes<HTMLKortxyzOgcapiCollectionlistElement>;
            "kortxyz-shell": LocalJSX.KortxyzShell & JSXBase.HTMLAttributes<HTMLKortxyzShellElement>;
            "kortxyz-sidebar": LocalJSX.KortxyzSidebar & JSXBase.HTMLAttributes<HTMLKortxyzSidebarElement>;
            "kortxyz-sidebar-button": LocalJSX.KortxyzSidebarButton & JSXBase.HTMLAttributes<HTMLKortxyzSidebarButtonElement>;
            "kortxyz-sidebar-panel": LocalJSX.KortxyzSidebarPanel & JSXBase.HTMLAttributes<HTMLKortxyzSidebarPanelElement>;
            /**
             * ## Intro
             * Webcomponent to visualise data on charts.
             * ## Example
             * ### From data url
             * ```html
             * <kortxyz-tauchart
             *   data="https://geodk.kort.xyz/collections/bygning/items?limit=100&properties=vertikalnoejagtighed,plannoejagtighed,planstedfaestelsesmetode"
             *   type="scatterplot"
             *   y="vertikalnoejagtighed"
             *   x="plannoejagtighed"
             *   color="planstedfaestelsesmetode"
             *   tooltip
             *   legend
             * ></kortxyz-tauchart>
             * ```
             * ### From store
             * ```html
             * <kortxyz-datastore style="visibility: hidden;"
             *   store="items" 
             *   data="https://geodk.kort.xyz/collections/vejmidte/items?limit=7000&properties=Trafikart,Vejkategori,Vejmidtetype"
             * ></kortxyz-datastore>
             * <kortxyz-tauchart
             *   store="items"
             *   type="horizontal-stacked-bar"
             *   y="vejkategori"
             *   x="count"
             *   color="trafikart"
             *   colorbrewer="Dark2"
             *   group-by-keys="trafikart,vejkategori,vejmidtetype"
             *   tooltip
             *   legend
             * ></kortxyz-tauchart>
             * ```
             */
            "kortxyz-tauchart": LocalJSX.KortxyzTauchart & JSXBase.HTMLAttributes<HTMLKortxyzTauchartElement>;
        }
    }
}
